name: Cognivirues Outbreak Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy-client:
    name: Build and Deploy Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install and Build Client
        run: |
          npm ci
          npm run build --if-present
        working-directory: ./client

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync build directory to S3
        run: aws s3 sync ./client/dist s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront Distribution
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/index.html" "/manifest.json" "/favicon.ico" "/robots.txt"

  deploy-server:
    name: Deploy Server to EC2
    needs: build-and-deploy-client # Run this job after the client is deployed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to the project directory
            cd ~/cognivirues-outbreak

            # Pull the latest changes from the main branch
            git pull origin main

            # Navigate to the server directory
            cd server

            # Install production dependencies
            npm ci --only=production

            # Compile TypeScript to JavaScript
            npm run build

            # Run the Prisma migration
            npm run prod:prisma:migrate

            # Restart the application with PM2
            # This will gracefully restart the app if it's running,
            # or start it if it's not.
            pm2 restart cognivirues-server || pm2 start "npm run prod:start" --name cognivirues-server
